@page
@model DemoWeb.Pages.Demos.Checkboxes

@{
    Layout = "Shared/_Layout";
}

<partial name="Shared/_StatusMessage" model="Model.StatusMessage"/>

<div asp-validation-summary="All">
    <span>Please correct the following errors</span>
</div>

<fieldset>
    <legend>Required ASP.NET Checkboxes (with hidden input) and Radio buttons</legend>

    <form method="post">

        <div class="form-field">
            <p>
                ASP.NET renders a checkbox and a hidden input for each boolean property.
                The hidden input is used to ensure that a value is sent for the checkbox,
                even if it is unchecked. Unchecking it should not fail validation.
            </p>
            <label>Is checked
                <input asp-for="Input.IsChecked"/>
            </label>
            <span asp-validation-for="Input.IsChecked"></span>
            @if (Model.Input.IsChecked) {
                <em class="results">This is checked.</em>
            } else {
                <em class="results">This is not checked</em>
            }
        </div>

        <div class="form-field">
            <p>
                One can also use the <code>[Remote]</code> validation attribute with checkboxes.
                This checkbox's remote validator returns valid only when it matches the one above.
                <strong>Note:</strong> Changes to
                <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.remoteattributebase.additionalfields">additional fields</a>
                do <em>not</em> automatically revalidate.
            </p>
            <label>Is checked, too
                <input asp-for="Input.IsCheckedToo"/>
            </label>
            <span asp-validation-for="Input.IsCheckedToo"></span>
        </div>

        <div class="form-field">
            <p>
                However, if you manually render a checkbox, the checkbox is only submitted
                when checked. So this allows cases where we require at least one checkbox
                is selected.
            </p>
            @foreach (var animal in Model.Animals) {
                <input name="SelectedAnimals"
                       type="checkbox"
                       value="@animal"
                       data-val="true"
                       data-val-required="Please select at least one animal"
                       data-rule-required="true"
                       data-msg-required="Please select at least one animal"
                       @if (Model.SelectedAnimals != null && Model.SelectedAnimals.Contains(animal)) {
                           <text>checked</text>
                       }/>
                <label>@animal</label>
            }
            <span asp-validation-for="SelectedAnimals"></span>
            @if (Model.SelectedAnimals!.Any()) {
                <em class="results">Selected animals: @string.Join(", ", Model.SelectedAnimals!)</em>
            }
        </div>

        <div class="form-field">
            <p>
                Similarly, with a required radio button list, one element should be checked.
            </p>
            @foreach (var fruit in Model.Fruits) {
                <input name="SelectedFruit"
                       type="radio"
                       value="@fruit"
                       data-val="true"
                       data-val-required="Please select at least one fruit"
                       data-rule-required="true"
                       data-msg-required="Please select at least one fruit"
                       @if (Model.SelectedFruit == fruit) {
                           <text>checked</text>
                       }/>
                <label>@fruit</label>
            }
            <span asp-validation-for="SelectedFruit"></span>
            @if (Model.SelectedFruit != string.Empty) {
                <em class="results">Selected fruit: @Model.SelectedFruit</em>
            }
        </div>

        <div class="form-field">
            <p>
                It's also common to bind a boolean property from a list to checkboxes.
            </p>
            @for (var i = 0; i <Model.Numbers.Count; i++) {
                var number = Model.Numbers[i];

                <label>
                    <input type="checkbox" asp-for="Numbers[i].IsSelected" />
                    @number.Name
                </label>
                @* The asp-for above appends an input with value="false" to the form. *@
                @* An explicit hidden generates input with value="False": *@
                @* <input type="hidden" asp-for="Numbers[i].IsSelected" /> *@
                <input type="hidden" asp-for="Numbers[i].Name" />
            }
            <span asp-validation-for="Numbers"></span>
            <em class="results">Selected numbers: @string.Join(", ", Model.Numbers.Where(n => n.IsSelected).Select(n => n.Name))</em>
        </div>

        <input type="submit" value="Submit"/>

    </form>
</fieldset>

@if (Model.StatusMessage is not null) {
    <a href="">Reset</a>
}

@section Scripts {
    <script>
        const service = new aspnetValidation.ValidationService(console);
        service.bootstrap();
    </script>
}