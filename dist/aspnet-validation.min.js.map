{"version":3,"sources":["webpack://aspnetValidation/webpack/universalModuleDefinition","webpack://aspnetValidation/webpack/bootstrap","webpack://aspnetValidation/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nullLogger","log","_","getRelativeFormElement","elementName","selector","realSelector","substr","dotLocation","lastIndexOf","relativeElementName","relativeElement","document","getElementsByName","required","element","params","Boolean","stringLength","min","parseInt","length","max","compare","other","otherElement","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","cDigit","nCheck","nDigit","bEven","replace","charAt","url","lowerCaseValue","toLowerCase","indexOf","phone","remote","fieldSelectors","additionalfields","split","fields","fieldSelector","fieldName","fieldElement","encodedParams","encodedParam","encodeURIComponent","push","payload","join","Promise","ok","reject","request","XMLHttpRequest","type","postData","FormData","append","open","setRequestHeader","send","onload","e","status","data","JSON","parse","responseText","statusText","onerror","logger","providers","messageFor","elementUIDs","elementByUID","formInputs","validators","elementEvents","summary","debounce","allowHiddenFields","validateForm","form","callback","formUID","getElementUID","formValidationEvent","focusFirstInvalid","invalidFormInputUIDs","filter","uid","firstInvalid","focus","isValid","prevalidate","isFieldValid","field","closest","fieldUID","ValidationInputCssClassName","ValidationInputValidCssClassName","ValidationMessageCssClassName","ValidationMessageValidCssClassName","this","addProvider","addMvcProviders","mvc","MvcValidationProviders","scanMessages","validationMessageElements","Array","from","querySelectorAll","hasAttribute","getAttribute","parseDirectives","attributes","directives","validationAtributes","cut","a","parameters","keys","Q","directive","error","pcut","pvalue","pkey","guid4","Math","random","toString","node","x","getFormValidationTask","formInputUIDs","formValidators","inputUID","tasks","map","all","then","result","every","shouldValidate","trackFormInput","cb","validate","preventDefault","stopImmediatePropagation","success","isProgrammaticValidate","CustomEvent","detail","valid","dispatchEvent","submit","validationEvent","catch","console","addEventListener","input","classList","remove","spans","innerHTML","renderSummary","addInput","createValidator","delay","clearTimeout","setTimeout","isDropdown","tagName","validateEvent","dataset","valEvent","scanInputs","inputs","createSummaryDOM","ul","createElement","li","appendChild","summaryElements","shadow","stringify","sort","renderedSummaryJSON","className","cloneNode","addError","message","add","removeError","isHidden","provider","resolution","offsetWidth","offsetHeight","getClientRects","bootstrap","options","readyState","scan","body","event","watch","observer","MutationObserver","mutations","forEach","mutation","observed","observe","childList","subtree","addedNodes","HTMLElement","target"],"mappings":"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","file":"aspnet-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * A simple IDictionary<string, string>\r\n */\r\nexport interface StringKeyValuePair {\r\n    [key: string]: string\r\n}\r\n\r\n/**\r\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\r\n */\r\ninterface ElementUID {\r\n    node: Element,\r\n    uid: string;\r\n}\r\n\r\n/**\r\n * A simple logging interface that mirrors the Console object.\r\n */\r\nexport interface Logger {\r\n    log(message: string, ...args: any[]): void;\r\n}\r\n\r\nconst nullLogger = new (class implements Logger {\r\n    log(_: string, ...args: any[]): void {}\r\n})();\r\n\r\n/**\r\n * Parameters passed into validation providers from the element attributes.\r\n * error property is read from data-val-[Provider Name] attribute.\r\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\r\n */\r\nexport interface ValidationDirectiveBindings {\r\n    error: string,\r\n    params: StringKeyValuePair\r\n}\r\n\r\n/**\r\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\r\n */\r\nexport type ValidationDirective = {\r\n    [key: string]: ValidationDirectiveBindings\r\n};\r\n\r\n/**\r\n * Validation plugin signature with multitype return.\r\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\r\n * String return signifies failed validation, which then will be used as the validation error message.\r\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\r\n */\r\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\r\n\r\n/**\r\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\r\n */\r\ntype Validator = () => Promise<boolean>;\r\n\r\n/**\r\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\r\n * @param elementName\r\n */\r\nfunction getRelativeFormElement(elementName: string, selector: string) {\r\n    // example elementName: Form.PasswordConfirm, Form.Email\r\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\r\n    // example result element name: Form.Password, __RequestVerificationToken\r\n\r\n    let realSelector = selector.substr(2); // Password, __RequestVerificationToken\r\n    let objectName = '';\r\n\r\n    let dotLocation = elementName.lastIndexOf('.');\r\n    if (dotLocation > -1) {\r\n        // Form\r\n        objectName = elementName.substr(0, dotLocation);\r\n\r\n        // Form.Password\r\n        let relativeElementName = objectName + '.' + realSelector;\r\n        let relativeElement = document.getElementsByName(relativeElementName)[0];\r\n        if (relativeElement) {\r\n            return relativeElement;\r\n        }\r\n    }\r\n\r\n    // __RequestVerificationToken\r\n    return document.getElementsByName(realSelector)[0];\r\n}\r\n\r\n/**\r\n * Contains default implementations for ASP.NET Core MVC validation attributes.\r\n */\r\nexport class MvcValidationProviders {\r\n    /**\r\n     * Validates whether the input has a value.\r\n     */\r\n    required: ValidationProvider = (value, element, params) => {\r\n        return Boolean(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies the length contstraint.\r\n     */\r\n    stringLength: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseInt(params.min);\r\n            if (value.length < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseInt(params.max);\r\n            if (value.length > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is equal to another input value.\r\n     */\r\n    compare: ValidationProvider = (value, element, params) => {\r\n        if (!params.other) {\r\n            return true;\r\n        }\r\n\r\n        let otherElement = getRelativeFormElement(element.name, params.other) as HTMLInputElement;\r\n        if (!otherElement) {\r\n            return true;\r\n        }\r\n\r\n        return (otherElement.value === value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a number within a given range.\r\n     */\r\n    range: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        let val = parseFloat(value);\r\n        if (isNaN(val)) {\r\n            return false;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseFloat(params.min);\r\n            if (val < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseFloat(params.max);\r\n            if (val > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies a regular expression pattern.\r\n     */\r\n    regex: ValidationProvider = (value, element, params) => {\r\n        if (!value || !params.pattern) {\r\n            return true;\r\n        }\r\n\r\n        let r = new RegExp(params.pattern);\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\r\n     */\r\n    email: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // RFC822 email address with .TLD validation\r\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\r\n        // https://gist.github.com/badsyntax/719800\r\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\r\n\r\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\r\n     */\r\n    creditcard: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) jquery-validation, MIT Licensed\r\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\r\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\r\n\r\n        // Accept only spaces, digits and dashes\r\n        if (/[^0-9 \\-]+/.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        var nCheck = 0,\r\n            nDigit = 0,\r\n            bEven = false,\r\n            n, cDigit;\r\n\r\n        value = value.replace(/\\D/g, \"\");\r\n\r\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\r\n        if (value.length < 13 || value.length > 19) {\r\n            return false;\r\n        }\r\n\r\n        for (n = value.length - 1; n >= 0; n--) {\r\n            cDigit = value.charAt(n);\r\n            nDigit = parseInt(cDigit, 10);\r\n            if (bEven) {\r\n                if ((nDigit *= 2) > 9) {\r\n                    nDigit -= 9;\r\n                }\r\n            }\r\n\r\n            nCheck += nDigit;\r\n            bEven = !bEven;\r\n        }\r\n\r\n        return (nCheck % 10) === 0;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a URL.\r\n     */\r\n    url: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        let lowerCaseValue = value.toLowerCase();\r\n\r\n        // Match the logic in `UrlAttribute`\r\n        return lowerCaseValue.indexOf('http://') > -1\r\n            || lowerCaseValue.indexOf('https://') > -1\r\n            || lowerCaseValue.indexOf('ftp://') > -1;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a phone number.\r\n     */\r\n    phone: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // Allows whitespace or dash as number separator because some people like to do that...\r\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\r\n        if (consecutiveSeparator.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        let r = /^\\+?[0-9\\-\\s]+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously validates the input value to a JSON GET API endpoint.\r\n     */\r\n    remote: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // params.additionalfields: *.Email,*.Username\r\n        let fieldSelectors: string[] = (params.additionalfields as string).split(',');\r\n        let fields: StringKeyValuePair = {};\r\n\r\n        for (let fieldSelector of fieldSelectors) {\r\n            let fieldName = fieldSelector.substr(2);\r\n            let fieldElement = getRelativeFormElement(element.name, fieldSelector) as HTMLInputElement;\r\n\r\n            let hasValue = Boolean(fieldElement && fieldElement.value);\r\n            if (!hasValue) {\r\n                continue;\r\n            }\r\n\r\n            fields[fieldName] = fieldElement.value;\r\n        }\r\n\r\n        let url: string = params['url'];\r\n        // console.log(fields);\r\n\r\n        let encodedParams: string[] = [];\r\n        for (let fieldName in fields) {\r\n            let encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\r\n            encodedParams.push(encodedParam);\r\n        }\r\n        let payload = encodedParams.join('&');\r\n        // console.log(payload);\r\n\r\n        return new Promise((ok, reject) => {\r\n            let request = new XMLHttpRequest();\r\n\r\n            if (params.type === 'Post') {\r\n                let postData = new FormData();\r\n                for (let fieldName in fields) {\r\n                    postData.append(fieldName, fields[fieldName]);\r\n                }\r\n                request.open('post', url);\r\n                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n                request.send(payload);\r\n            } else {\r\n                request.open('get', url + '?' + payload);\r\n                request.send();\r\n            }\r\n\r\n            request.onload = e => {\r\n                if (request.status >= 200 && request.status < 300) {\r\n                    let data = JSON.parse(request.responseText);\r\n                    ok(data);\r\n                } else {\r\n                    reject({\r\n                        status: request.status,\r\n                        statusText: request.statusText,\r\n                        data: request.responseText\r\n                    });\r\n                }\r\n            };\r\n\r\n            request.onerror = e => {\r\n                reject({\r\n                    status: request.status,\r\n                    statusText: request.statusText,\r\n                    data: request.responseText\r\n                });\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Responsibles for managing the DOM elements and running the validation providers.\r\n */\r\nexport class ValidationService {\r\n    /**\r\n     * A key-value collection of loaded validation plugins.\r\n     */\r\n    private providers: { [name: string]: ValidationProvider } = {};\r\n\r\n    /**\r\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\r\n     */\r\n    private messageFor: { [id: string]: Element[] } = {};\r\n\r\n    /**\r\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\r\n     */\r\n    private elementUIDs: ElementUID[] = [];\r\n\r\n    /**\r\n     * A key-value collection of UID to Element for quick lookup.\r\n     */\r\n    private elementByUID: { [uid: string]: Element } = {};\r\n\r\n    /**\r\n     * A key-value collection of input UIDs for a <form> UID.\r\n     */\r\n    private formInputs: { [formUID: string]: string[] } = {};\r\n\r\n    /**\r\n     * A key-value map for input UID to its validator factory.\r\n     */\r\n    private validators: { [inputUID: string]: Validator } = {};\r\n\r\n    /**\r\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\r\n     */\r\n    private elementEvents: { [id: string]: (e: Event, callback?: Function) => any } = {};\r\n\r\n    /**\r\n     * A key-value map of input UID to its validation error message.\r\n     */\r\n    private summary: StringKeyValuePair = {};\r\n\r\n    /**\r\n     * A serialized representation of the validation error message summary rendered to the user.\r\n     */\r\n    private renderedSummaryJSON: string;\r\n\r\n    /**\r\n     * In milliseconds, the rate of fire of the input validation.\r\n     */\r\n    debounce = 300;\r\n\r\n    /**\r\n     * Allow hidden fields validation     \r\n     */\r\n    allowHiddenFields = false;\r\n\r\n    private logger: Logger;\r\n    observer?: MutationObserver;\r\n\r\n    constructor(logger?: Logger) {\r\n        this.logger = logger || nullLogger;\r\n    }\r\n\r\n    /**\r\n     * Registers a new validation plugin of the given name, if not registered yet.\r\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\r\n     * @param name\r\n     * @param callback\r\n     */\r\n    addProvider(name: string, callback: ValidationProvider) {\r\n        if (this.providers[name]) {\r\n            // First-Come-First-Serve validation plugin design.\r\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\r\n            return;\r\n        }\r\n        this.logger.log(`Registered provider: ${name}`);\r\n        this.providers[name] = callback;\r\n    }\r\n\r\n    /**\r\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation.\r\n     */\r\n    private addMvcProviders() {\r\n        let mvc = new MvcValidationProviders();\r\n\r\n        // [Required]\r\n        this.addProvider('required', mvc.required);\r\n        // [StringLength], [MinLength], [MaxLength]\r\n        this.addProvider('length', mvc.stringLength);\r\n        this.addProvider('maxlength', mvc.stringLength);\r\n        this.addProvider('minlength', mvc.stringLength);\r\n        // [Compare]\r\n        this.addProvider('equalto', mvc.compare);\r\n        // [Range]\r\n        this.addProvider('range', mvc.range);\r\n        // [RegularExpression]\r\n        this.addProvider('regex', mvc.regex);\r\n        // [CreditCard]\r\n        this.addProvider('creditcard', mvc.creditcard);\r\n        // [EmailAddress]\r\n        this.addProvider('email', mvc.email);\r\n        // [Url]\r\n        this.addProvider('url', mvc.url);\r\n        // [Phone]\r\n        this.addProvider('phone', mvc.phone);\r\n        // [Remote]\r\n        this.addProvider('remote', mvc.remote);\r\n    }\r\n\r\n    /**\r\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\r\n     */\r\n    private scanMessages(root: HTMLElement) {\r\n        let validationMessageElements = Array.from(root.querySelectorAll<HTMLElement>('[data-valmsg-for]'));\r\n\r\n        // querySelectorAll does not include the root element itself.\r\n        // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\r\n        if (root.hasAttribute(\"data-valmsg-for\")) {\r\n            validationMessageElements.push(root);\r\n        }\r\n\r\n        for (let i = 0; i < validationMessageElements.length; i++) {\r\n            let e = validationMessageElements[i];\r\n            let name = e.getAttribute('data-valmsg-for');\r\n\r\n            if (!this.messageFor[name]) {\r\n                this.messageFor[name] = [];\r\n            }\r\n\r\n            this.messageFor[name].push(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given attribute map for an HTML input, returns the validation directives to be executed.\r\n     * @param attributes\r\n     */\r\n    parseDirectives(attributes: NamedNodeMap) {\r\n        let directives: ValidationDirective = {};\r\n        let validationAtributes: StringKeyValuePair = {};\r\n\r\n        let cut = 'data-val-'.length;\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            let a = attributes[i];\r\n            if (a.name.indexOf('data-val-') === 0) {\r\n                let key = a.name.substr(cut);\r\n                validationAtributes[key] = a.value;\r\n            }\r\n        }\r\n\r\n        for (let key in validationAtributes) {\r\n            if (key.indexOf('-') === -1) {\r\n                let parameters = Object.keys(validationAtributes).filter(Q => {\r\n                    return (Q !== key) && (Q.indexOf(key) === 0);\r\n                });\r\n\r\n                let directive: ValidationDirectiveBindings = {\r\n                    error: validationAtributes[key],\r\n                    params: {}\r\n                };\r\n\r\n                let pcut = (key + '-').length;\r\n                for (let i = 0; i < parameters.length; i++) {\r\n                    let pvalue = validationAtributes[parameters[i]];\r\n                    let pkey = parameters[i].substr(pcut);\r\n\r\n                    directive.params[pkey] = pvalue;\r\n                }\r\n\r\n                directives[key] = directive;\r\n            }\r\n        }\r\n\r\n        // console.log(directives);\r\n        return directives;\r\n    }\r\n\r\n    /**\r\n     *  Returns an RFC4122 version 4 compliant GUID.\r\n     */\r\n    private guid4() {\r\n        // (c) broofa, MIT Licensed\r\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a UID for an DOM element.\r\n     * @param node\r\n     */\r\n    private getElementUID(node: Element) {\r\n        let x = this.elementUIDs.filter(e => {\r\n            return e.node === node;\r\n        })[0];\r\n\r\n        if (x) {\r\n            return x.uid;\r\n        }\r\n\r\n        let uid = this.guid4();\r\n        this.elementUIDs.push({\r\n            node: node,\r\n            uid: uid\r\n        });\r\n        this.elementByUID[uid] = node;\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise that returns validation result for each and every inputs within the form.\r\n     * @param formUID\r\n     */\r\n    private getFormValidationTask(formUID: string) {\r\n        let formInputUIDs = this.formInputs[formUID];\r\n        if (!formInputUIDs || formInputUIDs.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let formValidators: Validator[] = [];\r\n\r\n        for (let i = 0; i < formInputUIDs.length; i++) {\r\n            let inputUID = formInputUIDs[i];\r\n            formValidators.push(this.validators[inputUID]);\r\n        }\r\n\r\n        let tasks = formValidators.map(factory => factory());\r\n        return Promise.all(tasks).then(result => result.every(e => e));\r\n    }\r\n\r\n    /**\r\n     * Fires off validation for elements within the provided form and then calls the callback\r\n     * @param form\r\n     * @param callback\r\n     */\r\n    validateForm = (form: HTMLFormElement, callback: Function) => {\r\n        let formUID = this.getElementUID(form);\r\n        let formValidationEvent = this.elementEvents[formUID];\r\n        if (formValidationEvent) {\r\n            formValidationEvent(null, callback);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Focuses the first invalid element within the provided form\r\n     * @param form\r\n     */\r\n    focusFirstInvalid = (form: HTMLFormElement) => {\r\n        let formUID = this.getElementUID(form);\r\n        let formInputUIDs = this.formInputs[formUID];\r\n        let invalidFormInputUIDs = formInputUIDs.filter(uid => this.summary[uid]);\r\n\r\n        if (invalidFormInputUIDs.length > 0) {\r\n            var firstInvalid = this.elementByUID[invalidFormInputUIDs[0]] as HTMLElement;\r\n            if (firstInvalid) {\r\n                firstInvalid.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the provided form is valid, and then calls the callback. The form will be validated before checking, unless prevalidate is set to false\r\n     * @param form\r\n     * @param prevalidate\r\n     * @param callback\r\n     * @returns\r\n     */\r\n    isValid = (form: HTMLFormElement, prevalidate: boolean = true, callback: Function) => {\r\n        if (prevalidate) {\r\n            this.validateForm(form, callback);\r\n        }\r\n        let formUID = this.getElementUID(form);\r\n        let formInputUIDs = this.formInputs[formUID];\r\n        let invalidFormInputUIDs = formInputUIDs.filter(uid => this.summary[uid]);\r\n        return invalidFormInputUIDs.length == 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the provided field is valid, and then calls the callback. The form will be validated before checking, unless prevalidate is set to false\r\n     * @param form\r\n     * @param prevalidate\r\n     * @param callback\r\n     * @returns\r\n     */\r\n    isFieldValid = (field: HTMLElement, prevalidate: boolean = true, callback: Function) => {\r\n\r\n        if (prevalidate) {\r\n            let form = field.closest(\"form\");\r\n            if (form != null) {\r\n                this.validateForm(form, callback);\r\n            }\r\n        }\r\n\r\n        let fieldUID = this.getElementUID(field);\r\n        return this.summary[fieldUID] != null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the event triggering the form submission indicates we should validate the form.\r\n     * @param e\r\n     */\r\n    private shouldValidate(e: Event) {\r\n        // Skip client-side validation if the form has been submitted via a button that has the \"formnovalidate\" attribute.\r\n        return !(e !== null && e['submitter'] && e['submitter']['formNoValidate']);\r\n    }\r\n\r\n    /**\r\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\r\n     * @param form\r\n     * @param inputUID\r\n     */\r\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\r\n        let formUID = this.getElementUID(form);\r\n        if (!this.formInputs[formUID]) {\r\n            this.formInputs[formUID] = [];\r\n        }\r\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\r\n        if (add) {\r\n            this.formInputs[formUID].push(inputUID);\r\n        }\r\n\r\n        if (this.elementEvents[formUID]) {\r\n            return;\r\n        }\r\n\r\n        let cb = (e: Event, callback?: Function) => {\r\n            if (!this.shouldValidate(e)) {\r\n                return;\r\n            }\r\n\r\n            let validate = this.getFormValidationTask(formUID);\r\n            if (!validate) {\r\n                return;\r\n\t\t\t}\r\n\r\n\t\t\t//Prevent the submit before validation\r\n\t\t\tif (e) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t}\r\n\r\n            validate.then(success => {\r\n                let isProgrammaticValidate = !e;\r\n                if (success) {\r\n                    if (isProgrammaticValidate) {\r\n                        callback(true);\r\n                        return;\r\n                    }\r\n                    const validationEvent = new CustomEvent('validation',\r\n                    {\r\n                        detail: { valid: true }\r\n                    });\r\n\t\t\t\t\tform.dispatchEvent(validationEvent);\r\n\r\n\t\t\t\t\t//Resubmit the form here, after the async validation is completed.\r\n\t\t\t\t\tform.submit();\r\n\r\n                    return;\r\n\t\t\t\t}\r\n\r\n\r\n                const validationEvent = new CustomEvent('validation',\r\n                {\r\n                    detail: { valid: false }\r\n                });\r\n                form.dispatchEvent(validationEvent);\r\n\r\n\r\n                if (isProgrammaticValidate) {\r\n                    callback(false);\r\n                }\r\n                else {\r\n                    this.focusFirstInvalid(form);\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n        };\r\n\r\n        form.addEventListener('submit', cb);\r\n        form.addEventListener('reset', e => {\r\n            let uids = this.formInputs[formUID];\r\n\r\n            for (let uid of uids) {\r\n                let input = this.elementByUID[uid] as HTMLInputElement;\r\n                input.classList.remove(this.ValidationInputCssClassName);\r\n                input.classList.remove(this.ValidationInputValidCssClassName);\r\n\r\n                let spans = this.messageFor[input.name];\r\n                if (spans) {\r\n                    for (let i = 0; i < spans.length; i++) {\r\n                        spans[i].innerHTML = '';\r\n                    }\r\n                }\r\n\r\n                delete this.summary[uid];\r\n            }\r\n            this.renderSummary();\r\n        });\r\n        this.elementEvents[formUID] = cb;\r\n    }\r\n\r\n    /**\r\n     * Adds an input element to be managed and validated by the service.\r\n     * Triggers a debounced live validation when input value changes.\r\n     * @param input\r\n     */\r\n    addInput(input: HTMLInputElement) {\r\n        let uid = this.getElementUID(input);\r\n\r\n        let directives = this.parseDirectives(input.attributes);\r\n        let validate = this.createValidator(input, directives);\r\n\r\n        this.validators[uid] = validate;\r\n        if (input.form) {\r\n            this.trackFormInput(input.form, uid);\r\n        }\r\n\r\n        if (this.elementEvents[uid]) {\r\n            return;\r\n        }\r\n\r\n        let delay;\r\n        let cb = e => {\r\n            let validate = this.validators[uid];\r\n            clearTimeout(delay);\r\n            delay = setTimeout(validate, this.debounce);\r\n        };\r\n\r\n        let isDropdown = input.tagName.toLowerCase() === 'select';\r\n        let validateEvent = input.dataset.valEvent;\r\n        if (isDropdown) {\r\n            input.addEventListener('change', cb);\r\n        } else if (validateEvent) {\r\n            input.addEventListener(validateEvent, cb);\r\n        }\r\n        else {\r\n            input.addEventListener('input', cb);\r\n        }\r\n\r\n        this.elementEvents[uid] = cb;\r\n    }\r\n\r\n    /**\r\n     * Scans the entire document for input elements to be validated.\r\n     */\r\n    private scanInputs(root: HTMLElement) {\r\n        let inputs = Array.from(root.querySelectorAll<HTMLElement>('[data-val=\"true\"]'));\r\n\r\n        // querySelectorAll does not include the root element itself.\r\n        // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\r\n        if (root.getAttribute(\"data-val\") === \"true\") {\r\n            inputs.push(root);\r\n        }\r\n\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i] as HTMLInputElement;\r\n            this.addInput(input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a <ul> element as a validation errors summary.\r\n     */\r\n    createSummaryDOM() {\r\n        if (!Object.keys(this.summary).length) {\r\n            return null;\r\n        }\r\n\r\n        let ul = document.createElement('ul');\r\n        for (let key in this.summary) {\r\n            let li = document.createElement('li');\r\n            li.innerHTML = this.summary[key];\r\n            ul.appendChild(li);\r\n        }\r\n        return ul;\r\n    }\r\n\r\n    /**\r\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\r\n     */\r\n    private renderSummary() {\r\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\r\n        if (!summaryElements.length) {\r\n            return;\r\n        }\r\n\r\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\r\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\r\n        if (shadow === this.renderedSummaryJSON) {\r\n            return;\r\n        }\r\n\r\n        // Prevents wasteful re-rendering of summary list element with identical items!\r\n        // console.log('RENDERING VALIDATION SUMMARY');\r\n        this.renderedSummaryJSON = shadow;\r\n        let ul = this.createSummaryDOM();\r\n\r\n        for (let i = 0; i < summaryElements.length; i++) {\r\n            let e = summaryElements[i];\r\n            e.innerHTML = '';\r\n            if (ul) {\r\n                e.className = 'validation-summary-errors';\r\n                e.appendChild(ul.cloneNode(true));\r\n            } else {\r\n                e.className = 'validation-summary-valid';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input\r\n     * @param message\r\n     */\r\n    addError(input: HTMLInputElement, message: string) {\r\n        let spans = this.messageFor[input.name];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = message;\r\n                spans[i].className = this.ValidationMessageCssClassName;\r\n            }\r\n        }\r\n\r\n        input.classList.remove(this.ValidationInputValidCssClassName);\r\n        input.classList.add(this.ValidationInputCssClassName);\r\n\r\n        let uid = this.getElementUID(input);\r\n        this.summary[uid] = message;\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input\r\n     */\r\n    removeError(input: HTMLInputElement) {\r\n        let spans = this.messageFor[input.name];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = '';\r\n                spans[i].className = this.ValidationMessageValidCssClassName;\r\n            }\r\n        }\r\n\r\n        input.classList.remove(this.ValidationInputCssClassName);\r\n        input.classList.add(this.ValidationInputValidCssClassName);\r\n\r\n        let uid = this.getElementUID(input);\r\n        delete this.summary[uid];\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Returns a validation Promise factory for an input element, using given validation directives.\r\n     * @param input\r\n     * @param directives\r\n     */\r\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\r\n        return async () => {\r\n\r\n            // only validate visible fields\r\n            if (!this.isHidden(input))\r\n            {\r\n                for (let key in directives) {\r\n                    let directive = directives[key];\r\n                    let provider = this.providers[key];\r\n\r\n                    if (!provider) {\r\n                        console.log('aspnet-validation provider not implemented: ' + key);\r\n                        continue;\r\n                    }\r\n                    this.logger.log(`Running ${key} validator on element`, input);\r\n\r\n                    let result = provider(input.value, input, directive.params);\r\n                    let valid = false;\r\n                    let error = directive.error;\r\n\r\n                    if (typeof result === 'boolean') {\r\n                        valid = result;\r\n                    } else if (typeof result === 'string') {\r\n                        valid = false;\r\n                        error = result;\r\n                    } else {\r\n                        let resolution = await result;\r\n                        if (typeof resolution === 'boolean') {\r\n                            valid = resolution;\r\n                        } else {\r\n                            valid = false;\r\n                            error = resolution;\r\n                        }\r\n                    }\r\n\r\n                    if (!valid) {\r\n                        this.addError(input, error);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.removeError(input);\r\n            return true;\r\n\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided input is hidden from the browser\r\n     * @param input\r\n     * @returns\r\n     */\r\n    private isHidden(input: HTMLElement) {\r\n        return !(this.allowHiddenFields || input.offsetWidth || input.offsetHeight || input.getClientRects().length );\r\n    }\r\n\r\n    /**\r\n     * Load default validation providers and scans the entire document when ready.\r\n     * @param options.watch If set to true, a MutationObserver will be used to continuously watch for new elements that provide validation directives.\r\n     */\r\n    bootstrap(options?: { watch?: boolean, root?: HTMLElement }) {\r\n        options = options || {};\r\n\r\n        this.addMvcProviders();\r\n        let document = window.document;\r\n        // If the document is done loading, scan it now.\r\n        if(document.readyState === 'complete' || document.readyState === 'interactive') {\r\n            this.scan(options.root || window.document.body);\r\n        }\r\n        else {\r\n            // Otherwise wait until the document is done loading.\r\n            window.document.addEventListener('DOMContentLoaded', event => {\r\n                this.scan(options.root || window.document.body);\r\n            });\r\n        }\r\n\r\n        // Watch for further mutations\r\n        if (options.watch) {\r\n            this.watch(options.root);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scans the provided root element for any validation directives and attaches behavior to them.\r\n     */\r\n    scan(root: HTMLElement) {\r\n        this.scanMessages(root);\r\n        this.scanInputs(root);\r\n    }\r\n\r\n    /**\r\n     * Watches the provided root element for mutations, and scans for new validation directives to attach behavior.\r\n     * @param root The root element to use, defaults to the document.documentElement.\r\n     */\r\n    watch(root: HTMLElement) {\r\n        this.observer = new MutationObserver(mutations => {\r\n            mutations.forEach(mutation => {\r\n                this.observed(mutation);\r\n            });\r\n        });\r\n        this.observer.observe(root, {\r\n            attributes: true,\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        this.logger.log(\"Watching for mutations\");\r\n    }\r\n\r\n    private observed(mutation: MutationRecord) {\r\n        if(mutation.type === 'childList') {\r\n            for(let i = 0; i < mutation.addedNodes.length; i++) {\r\n                let node = mutation.addedNodes[i];\r\n                if (node instanceof HTMLElement) {\r\n                    this.scan(node);\r\n                }\r\n            }\r\n        } else if(mutation.type === 'attributes') {\r\n            if (mutation.target instanceof HTMLElement) {\r\n                this.scan(mutation.target);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Override CSS class name for input validation. Default: 'input-validation-error'\r\n     */\r\n     ValidationInputCssClassName = \"input-validation-error\";\r\n\r\n     /**\r\n      * Override CSS class name for valid input validation. Default: 'input-validation-valid'\r\n      */\r\n     ValidationInputValidCssClassName = \"input-validation-valid\";\r\n\r\n     /**\r\n      * Override CSS class name for field validation error. Default: 'field-validation-error'\r\n      */\r\n     ValidationMessageCssClassName = \"field-validation-error\";  \r\n\r\n     /**\r\n      * Override CSS class name for valid field validation. Default: 'field-validation-valid'\r\n      */\r\n     ValidationMessageValidCssClassName = \"field-validation-valid\";\r\n}\r\n"],"sourceRoot":""}